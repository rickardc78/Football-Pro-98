/* 컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
   Copyright 1991-1997 Sierra On-Line.  All Rights Reserved.

   This code is copyrighted and intended as an aid in writing utilities
   for the Front Page Sports Football products.  All rights reserved.

   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
   PARTICULAR PURPOSE.


	team.h

	data members:

	userID			calling functions can give team any value for later
						reference (e.g. the gadgets create an alphabetical list
						which has no relation to conf div and teamIndex, but still
						need to know which team has been 'clicked' on)
	passValid		if user wants to alter data, has a valid password been entered?

	(the following block of data is unique the team, and is used to compare
	for any changes made to a duplicate)
	confIndex		league identification indice
	divIndex			league identification indice
	teamIndex		league identification indice
	cityId			which city is closest
	statiumType		what kind of surface
	ownerType		computer or human?
	pm, am			play & arcade mode settings
	manage			computer management indicator

	wins				these values are generated by asking the schedule to
	losses			sum all the values up to the current point of the
	ties				season
	pf
	pa

	name, mascot,	string arrays
	abbr, stadium,
	password, coach

	cmpEnd			(where to stop comparision)

	the Team class

	GJW: 1-15-1992, original creation
	GJW: 3-24-1992, new league functions
	GJW: 9-14-1994, Team just a pointer to struct TeamData, defined elsewhere
	GJW: 7-18-1995, jersey & sock stripe support added

	CAM	11 JUL 96	Added support for jersey preference
	CAM	14 AUG 96	Added support for Uniform number colors
	MMQ	12 DEC 96	Added CopyExtra()

컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴 */

#ifndef	_TEAM_H
#define	_TEAM_H

// #include		<dir.h>
#include		<stdio.h>

#include		"palette.h"
#include		"roster.h"
#include		"schedule.h"
#include		"gameplan.h"

#define	MANAGE_ROSTER 0
#define	MANAGE_TRAININGCAMP 1
#define	MANAGE_MAX 2

#define	OWNER_COMPUTER 0
#define	OWNER_HUMAN 1
#define	OWNER_MAX 2

#define	STADIUM_OUTGRASS 0
#define	STADIUM_OUTTURF 1
#define	STADIUM_INTURF 2
#define	STADIUM_MAX 3

#define	STEAL_ALL		0
#define	STEAL_PONLY		1
#define	STEAL_EXTRA		2				// 12/10/96 mcqueen

struct FAR	TeamData;

class Team
{
public:
	enum
	{
		ABBR_LENGTH = 4,
		NAME_LENGTH = 16,
		COACH_NAME_LENGTH = 24,
		PASSWORD_LENGTH = 8,
		PN_NAME_LENGTH = 16,
	};
	enum UniformNum
	{
			UNIFORMNUM_HELMET,
			UNIFORMNUM_JERSEY,
			UNIFORMNUM_STRIPE,
			UNIFORMNUM_PANTS,
			UNIFORMNUM_PANTS_STRIP,
			UNIFORMNUM_SOCKSTR,
	};

	struct ProPct
	{
		DYN_8		agg,		// %age aggresive
					bal,		// balanced
					con;		// conservative
	};

private:
	// member functions

	// data members


protected:
	// member functions
	void					Load (char *planfilename, ReadBFile &rlf, DYN_16 tId);
	void					SaveNewInfo (DYN_8 *path, DYN_8 *fName, DYN_16);
	DYN_16				AIRoster (DYN_16 mrData);
	void					AITrain ();
	void					CopyGamePlan (DYN_8 *, DYN_8 *, DYN_8 *, DYN_8 *,
												DYN_16, DYN_8);

	// data members
	static PoolAlloc		*pa,	// where to get memory from
								*paePtr;

public:
	TeamData					*dataPtr;

public:
	// member functions
	static void			Init ();
	static void			DeInit ();

	void					*operator new (size_t size);
	void					operator delete (void *t, size_t size);

							Team (char *planfilename, ReadBFile &rlf, DYN_16 tId, DYN_16 newFlag);
							Team (char *planfilename, ReadBFile &rlf, DYN_16 tId);
							Team (Team *tPtr);
							Team ();
							~Team ();

	void					Save (char *planfilename, WriteBFile &wlf);
	void					SavePlayersLW (WriteBFile &wlf);

	DYN_16				GetCI ();
	void					SetCI (DYN_16 value);
	DYN_16				GetDI ();
	void					SetDI (DYN_16 value);
	DYN_16				GetTI ();
	void					SetTI (DYN_16 value);
	DYN_16				GetCity ();
	void					SetCity (DYN_16 value);
	DYN_16				GetWins ();
	void					SetWins (DYN_16 value);
	DYN_16				GetLosses ();
	void					SetLosses (DYN_16 value);
	DYN_16				GetTies ();
	void					SetTies (DYN_16 value);
	DYN_16				GetPF ();
	void					SetPF (DYN_16 value);
	DYN_16				GetPA ();
	void					SetPA (DYN_16 value);
	DYN_16				GetUser ();
	void					SetUser (DYN_16 value);
	DYN_8					GetStadiumType ();
	void					SetStadiumType (DYN_8 value);
	DYN_8					GetOwner ();
	void					SetOwner (DYN_8 value);
	DYN_16				GetPM ();
	void					SetPM (DYN_16 value);
	DYN_16				GetAM ();
	void					SetAM (DYN_16 value);
	DYN_8					GetManage ();
	void					SetManage (DYN_8 value);
	DYN_16				GetPassValid ();
	void					SetPassValid (DYN_16 value);
	DYN_16				GetId ( void );
	void					SetId ( DYN_16 id );
	DYN_16				GetNFLId () const;
	void					ClearNFLId ();

	Roster *			GetRPtr();
	DYN_8					FAR *GetName ();
	void					SetName (DYN_8 FAR *string);
	DYN_8					FAR *GetMascot ();
	void					SetMascot (DYN_8 FAR *string);
	DYN_8					FAR *GetAbbr ();
	void					SetAbbr (DYN_8 FAR *string);
	DYN_8					FAR *GetStadiumName ();
	void					SetStadiumName (DYN_8 FAR *string);
	DYN_8					FAR *GetPassword ();
	void					SetPassword (DYN_8 FAR *string);
	DYN_8					FAR *GetCoach ();
	void					SetCoach (DYN_8 FAR *string);

	// GJW: 7-18-1995, replace this block of functions
	void					GetRGBHelmet (Palette::RGB FAR *rgb);
	void					SetRGBHelmet (Palette::RGB FAR *rgb);
	void					GetRGBLightJersey (Palette::RGB FAR *rgb);
	void					SetRGBLightJersey (Palette::RGB FAR *rgb);
	void					GetRGBDarkJersey (Palette::RGB FAR *rgb);
	void					SetRGBDarkJersey (Palette::RGB FAR *rgb);
	void					GetRGBLightPants (Palette::RGB FAR *rgb);
	void					SetRGBLightPants (Palette::RGB FAR *rgb);
	void					GetRGBDarkPants (Palette::RGB FAR *rgb);
	void					SetRGBDarkPants (Palette::RGB FAR *rgb);
	void					GetRGBLightJerseyStripe (Palette::RGB FAR *rgb);
	void					SetRGBLightJerseyStripe (Palette::RGB FAR *rgb);
	void					GetRGBDarkJerseyStripe (Palette::RGB FAR *rgb);
	void					SetRGBDarkJerseyStripe (Palette::RGB FAR *rgb);
	void					GetRGBLightPantsStripe (Palette::RGB FAR *rgb);
	void					SetRGBLightPantsStripe (Palette::RGB FAR *rgb);
	void					GetRGBDarkPantsStripe (Palette::RGB FAR *rgb);
	void					SetRGBDarkPantsStripe (Palette::RGB FAR *rgb);
	void					GetRGBLightSockStripe (Palette::RGB FAR *rgb);
	void					SetRGBLightSockStripe (Palette::RGB FAR *rgb);
	void					GetRGBDarkSockStripe (Palette::RGB FAR *rgb);
	void					SetRGBDarkSockStripe (Palette::RGB FAR *rgb);
	// GJW: 7-18-1995

	void					GetDraftProfileName (DYN_8 FAR *string) const;
	void					SetDraftProfileName (const DYN_8 FAR *string);

	DYN_16				WLTPct ();

	Roster::TrainAllocs	*GetTrainAllocs (Roster::SlotId);
	void						SetTrainAllocs (Roster::SlotId, Roster::TrainAllocs *);
	DYN_16					TrainAlloc ();

	void					GenerateRecord (Schedule *);
	DYN_16				Compare (Team *);
	void					Copy (Team *);
	void					CopyExtra( Team *srcTeam );

	void					Steal (ReadBFile &rlf, DYN_8 *pName, DYN_8 *fName );
	void					Steal (DYN_8 *pName, DYN_8 *fName,
										Team *srcTeam, DYN_8 tst);
	DYN_16				NewLeagueInfo (PlayerRdWr &prw,
												DYN_16 pId,
												DYN_8 *dPath, DYN_8 *dName,
												DYN_8 proBowlFlag);
	DYN_16				NewLeagueCheck (DYN_8 *pName, DYN_8 *fName);

	void					LoadRoster (ReadBFile &rlf);
	Roster				*LoadPlayers (PlayerRdWr *prwPtr);
	void					DeletePlayers ();
	DYN_16				PickPlayers (GenList<RosPlayer> *pList [], DYN_16 newId);

   // new for All Pro Team JWM 12/26/96
   DYN_16            PickPlayers (GenList<RosPlayer> *pList, DYN_16 newId);

	DYN_16				Manage (DYN_16 mData, DYN_16 subType);
	void					Train ();
	RosPlayer			*AddPlayer (RosPlayer *newPPtr, RosPlayer *oldPPtr);
	DYN_16				DraftSelect (GenList<RosPlayer> * [], Roster::DraftSelectType);
	TradeStatus			TradeEval (RosPlayer **p1Ptr, RosPlayer **p2Ptr);
	RosPlayer			*GetPlayer (Roster::SlotId, DYN_16);
	RosPlayer			*GetPlayer (DYN_16);
	DYN_16				WannaTrade (RosPlayer **dest,
											Roster::SlotId *sIds, RosPlayer **ptPtr);
	RatingWeights		*GetRatWeights ();
	void					SetRatWeights (RatingWeights *rwPtr);
	DYN_16				RemoveNoTrades (GenList<RosPlayer> *pList,
													const RosPlayer *pPtr) const;

	DYN_32				BuildTradePlayerList (TOManager &tom,
															Roster::SlotId *sIds,
															const RosPlayer **pPtrs);

	DYN_16				AssignedFull ();
	void					GenerateStrategies (DYN_U_16 *);
	void					HealPlayers ();
	void					SeasonReset (DYN_16);

	void					Print ();

	void					SetProPct(Team::ProPct r_o, Team::ProPct p_o,
										 Team::ProPct r_d, Team::ProPct p_d);

	void					GetProPct(Team::ProPct* r_o, Team::ProPct* p_o,
										 Team::ProPct* r_d, Team::ProPct* p_d);

	void					GSDefAdditional () ;
	GamePlan *			gpOffCoach1() ;
	GamePlan *			gpOffGamePlan1() ;
	GamePlan *			gpDefCoach1() ;
	GamePlan *			gpDefGamePlan1() ;
	GamePlan *			gpOffCoach2() ;
	GamePlan *			gpOffGamePlan2() ;
	GamePlan *			gpDefCoach2() ;
	GamePlan *			gpDefGamePlan2() ;
	void					GetAdditional (char *planfilename) ;
	void					SaveAdditional (char *planfilename) ;

	DYN_8					GetJersey	( void );
	void					SetJersey	( DYN_8 jsy );

	UniformNum			GetNumberColorIndexDark( void );
	UniformNum			GetNumberColorIndexLight( void );
	void					SetNumberColorIndexDark( UniformNum idxD );
	void					SetNumberColorIndexLight( UniformNum idxL );

	// data members
};

#endif		// _TEAM_H

// Team.h
